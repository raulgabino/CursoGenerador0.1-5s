"use server"

import { findAcademicSources } from "@/services/academic-search-service"
import { generateTextWithAI } from "@/services/unified-ai-service"
import type { SearchSourcesRequest } from "@/app/api/course/search-sources/route"

export async function getEnhancedAcademicSources(
  searchContext: SearchSourcesRequest,
): Promise<string | { error: string }> {
  const { courseTitle, moduleName, moduleDescription, moduleHours, assessments } = searchContext

  try {
    console.log(`[EnhancedSourceSearch] Starting enhanced search for module: "${moduleName}"`)

    // PASO 1: Generar m√∫ltiples consultas de b√∫squeda enriquecidas usando IA
    const queryGenerationPrompt = `
      Act√∫a como un bibliotecario de investigaci√≥n experto especializado en b√∫squedas acad√©micas.
      
      CONTEXTO DEL CURSO:
      - T√≠tulo del curso: "${courseTitle}"
      - M√≥dulo espec√≠fico: "${moduleName}"
      - Descripci√≥n del m√≥dulo: "${moduleDescription}"
      - Duraci√≥n: ${moduleHours || "No especificada"} horas
      - Evaluaciones: ${assessments || "No especificadas"}
      
      Tu tarea es generar 4 consultas de b√∫squeda acad√©mica de alta calidad en ingl√©s que un investigador usar√≠a para encontrar art√≠culos relevantes en bases de datos como arXiv, CORE, o PubMed.
      
      INSTRUCCIONES:
      1. Cada consulta debe ser espec√≠fica y t√©cnica
      2. Incluye t√©rminos clave del dominio acad√©mico
      3. Var√≠a el enfoque: te√≥rico, pr√°ctico, metodol√≥gico, y aplicado
      4. Usa comillas para frases exactas cuando sea apropiado
      5. Incluye sin√≥nimos y t√©rminos relacionados
      
      Devuelve √∫nicamente las 4 consultas de b√∫squeda, cada una en una nueva l√≠nea. No a√±adas numeraci√≥n, guiones ni explicaciones.
    `

    console.log("[EnhancedSourceSearch] Generating enhanced search queries...")

    const queryResult = await generateTextWithAI(queryGenerationPrompt, undefined, {
      provider: "openai",
      fallbackProviders: ["cohere", "anthropic"],
      maxTokens: 300,
      temperature: 0.3,
    })

    const academicQueries = queryResult.text.trim()
    if (!academicQueries) {
      return { error: "No se pudieron generar consultas de b√∫squeda acad√©micas." }
    }

    console.log(`[EnhancedSourceSearch] Generated queries:\n${academicQueries}`)

    // PASO 2: Crear consulta combinada m√°s rica
    const queries = academicQueries.split("\n").filter((q) => q.trim())
    const enhancedQuery = queries.join(" OR ")

    // Tambi√©n crear una consulta de respaldo m√°s simple pero contextual
    const fallbackQuery = `"${moduleName}" AND "${courseTitle}" AND (education OR learning OR teaching OR curriculum)`

    console.log(`[EnhancedSourceSearch] Enhanced query: ${enhancedQuery}`)
    console.log(`[EnhancedSourceSearch] Fallback query: ${fallbackQuery}`)

    // PASO 3: Buscar en las APIs acad√©micas con la consulta enriquecida
    let sources = await findAcademicSources(enhancedQuery)

    // Si no se encuentran resultados, intentar con la consulta de respaldo
    if (sources.length === 0) {
      console.log("[EnhancedSourceSearch] No results with enhanced query, trying fallback...")
      sources = await findAcademicSources(fallbackQuery)
    }

    // Si a√∫n no hay resultados, intentar con una consulta m√°s general
    if (sources.length === 0) {
      console.log("[EnhancedSourceSearch] No results with fallback, trying general query...")
      const generalQuery = `"${moduleName}" OR "${courseTitle.split(" ").slice(0, 3).join(" ")}"`
      sources = await findAcademicSources(generalQuery)
    }

    if (sources.length === 0) {
      return `No se encontraron fuentes acad√©micas espec√≠ficas para el m√≥dulo "${moduleName}". 

**Sugerencias para b√∫squeda manual:**
- Busca en Google Scholar: "${moduleName} education"
- Revisa repositorios institucionales de universidades
- Consulta bases de datos especializadas en educaci√≥n como ERIC
- Busca en ResearchGate con t√©rminos clave del m√≥dulo

**T√©rminos de b√∫squeda recomendados:**
${queries
  .slice(0, 2)
  .map((q) => `- ${q}`)
  .join("\n")}`
    }

    // PASO 4: Usar IA para sintetizar y presentar los mejores resultados con contexto enriquecido
    const synthesisPrompt = `
      Eres un asistente de investigaci√≥n acad√©mica especializado en educaci√≥n. 
      
      CONTEXTO DEL M√ìDULO:
      - Curso: "${courseTitle}"
      - M√≥dulo: "${moduleName}"
      - Descripci√≥n: "${moduleDescription}"
      - Duraci√≥n: ${moduleHours || "No especificada"} horas
      
      A continuaci√≥n se presenta una lista de art√≠culos de investigaci√≥n encontrados para este m√≥dulo espec√≠fico.
      
      Lista de art√≠culos (en formato JSON):
      ${JSON.stringify(sources, null, 2)}
      
      INSTRUCCIONES:
      1. Selecciona los 3-4 art√≠culos M√ÅS RELEVANTES para este m√≥dulo espec√≠fico
      2. Para cada art√≠culo seleccionado, proporciona:
         - Una cita completa en formato APA
         - El enlace directo al art√≠culo
         - Una explicaci√≥n de 2-3 frases sobre por qu√© este art√≠culo es valioso espec√≠ficamente para ense√±ar "${moduleName}" en el contexto de "${courseTitle}"
         - Una sugerencia concreta de c√≥mo el instructor podr√≠a usar este recurso en el m√≥dulo
      
      3. Organiza la respuesta en secciones claras
      4. Usa Markdown para formatear la salida
      5. Prioriza art√≠culos que tengan aplicaci√≥n pr√°ctica en educaci√≥n
      
      FORMATO DE SALIDA:
      ## Fuentes Acad√©micas Recomendadas para "${moduleName}"
      
      ### üìö Art√≠culo 1
      **[T√≠tulo del art√≠culo]**
      - **Cita APA:** [cita completa]
      - **Enlace:** [URL]
      - **Relevancia:** [explicaci√≥n espec√≠fica]
      - **Aplicaci√≥n sugerida:** [c√≥mo usar en el m√≥dulo]
      
      [Repetir para cada art√≠culo]
    `

    console.log("[EnhancedSourceSearch] Synthesizing results with AI...")

    const summaryResult = await generateTextWithAI(synthesisPrompt, undefined, {
      provider: "anthropic",
      fallbackProviders: ["openai", "cohere"],
      maxTokens: 1500,
      temperature: 0.2,
    })

    console.log(`[EnhancedSourceSearch] Enhanced search completed successfully for "${moduleName}"`)

    return summaryResult.text || "No se pudo generar un resumen de las fuentes encontradas."
  } catch (error: any) {
    console.error("Error in getEnhancedAcademicSources:", error)
    return {
      error: `Error al buscar fuentes acad√©micas: ${error.message || "Error desconocido"}. Por favor, intenta nuevamente.`,
    }
  }
}
